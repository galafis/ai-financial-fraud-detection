# ================================================================
# DOCKERFILE EXEMPLO DIDÁTICO - AI FINANCIAL FRAUD DETECTION
# ================================================================
# Este Dockerfile demonstra as melhores práticas para containerização
# de aplicações Python com foco em segurança, performance e manutenibilidade
#
# PRINCIPAIS CONCEITOS DEMONSTRADOS:
# - Multi-stage build para redução do tamanho da imagem
# - Usuário não-privilegiado para segurança
# - Otimização de camadas
# - Healthcheck personalizado
# - Variáveis de ambiente parametrizáveis
# - Cache de dependências otimizado
# ================================================================

# ================================================================
# ESTÁGIO 1: BUILD - Ambiente de compilação e instalação
# ================================================================
# Usamos uma imagem base com Python 3.11 slim para reduzir o tamanho
# A versão 'slim' contém apenas os componentes essenciais do Python
FROM python:3.11-slim AS builder

# Metadados da imagem (boas práticas de documentação)
LABEL maintainer="Gabriel Demetrios Lafis <gabrieldemetrios@gmail.com>"
LABEL description="AI Financial Fraud Detection System - Example Dockerfile"
LABEL version="1.0.0"
LABEL org.opencontainers.image.source="https://github.com/galafis/ai-financial-fraud-detection"

# Definir variáveis de ambiente para otimização do Python
# Evita a criação de arquivos .pyc desnecessários
ENV PYTHONDONTWRITEBYTECODE=1
# Força a saída não-bufferizada (importante para logs em containers)
ENV PYTHONUNBUFFERED=1
# Desabilita o cache do pip (economiza espaço)
ENV PIP_NO_CACHE_DIR=1
# Evita interações durante a instalação de pacotes
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Instalar dependências do sistema necessárias para compilação
# Usar --no-install-recommends para instalar apenas pacotes essenciais
# && rm -rf /var/lib/apt/lists/* para limpar o cache do apt (reduz tamanho)
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        build-essential \
        gcc \
        g++ \
        curl \
        git \
    && rm -rf /var/lib/apt/lists/*

# Criar usuário não-privilegiado (SEGURANÇA CRÍTICA)
# Executar aplicações como root é um risco de segurança
RUN groupadd --gid 1000 appuser \
    && useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Definir diretório de trabalho
WORKDIR /app

# Otimização: Copiar apenas requirements.txt primeiro
# Isso permite cache da camada de instalação de dependências
# se o código fonte mudar mas as dependências não
COPY requirements.txt .

# Instalar dependências Python em um diretório específico
# Usar --user para instalar no diretório do usuário
RUN pip install --user --no-cache-dir -r requirements.txt

# ================================================================
# ESTÁGIO 2: RUNTIME - Imagem final otimizada
# ================================================================
# Usar imagem base menor para produção (sem ferramentas de build)
FROM python:3.11-slim AS runtime

# Copiar metadados do estágio anterior
LABEL maintainer="Gabriel Demetrios Lafis <gabrieldemetrios@gmail.com>"
LABEL description="AI Financial Fraud Detection System - Production Runtime"
LABEL version="1.0.0"

# Variáveis de ambiente para produção
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
# Variáveis específicas da aplicação
ENV APP_ENV=production
ENV APP_HOST=0.0.0.0
ENV APP_PORT=8000
ENV LOG_LEVEL=INFO
# Configurações de ML/AI
ENV MODEL_PATH=/app/models
ENV FEATURE_STORE_PATH=/app/features
# Configurações de segurança
ENV API_KEY_LENGTH=32
ENV JWT_ALGORITHM=HS256

# Instalar apenas dependências de runtime essenciais
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        curl \
        ca-certificates \
        tini \
    && rm -rf /var/lib/apt/lists/*

# Criar usuário não-privilegiado (mesmos IDs do estágio de build)
RUN groupadd --gid 1000 appuser \
    && useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Copiar dependências Python instaladas do estágio de build
COPY --from=builder /home/appuser/.local /home/appuser/.local

# Definir diretório de trabalho
WORKDIR /app

# Copiar código fonte da aplicação
# .dockerignore deve estar configurado adequadamente
COPY --chown=appuser:appuser . .

# Criar diretórios necessários com permissões adequadas
RUN mkdir -p /app/logs /app/models /app/data /app/temp \
    && chown -R appuser:appuser /app

# Adicionar diretório local do usuário ao PATH
ENV PATH=/home/appuser/.local/bin:$PATH

# Configurar ponto de entrada com tini (process reaper)
# Tini é importante para lidar adequadamente com sinais do sistema
ENTRYPOINT ["tini", "--"]

# Expor porta da aplicação
# Documentação - não abre a porta automaticamente
EXPOSE $APP_PORT

# Definir volumes para dados persistentes
# Permite montagem de volumes externos
VOLUME ["/app/logs", "/app/models", "/app/data"]

# ================================================================
# HEALTHCHECK - Monitoramento da saúde do container
# ================================================================
# Verificação personalizada da saúde da aplicação
# Executa a cada 30 segundos, timeout de 10s, 3 tentativas antes de unhealthy
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${APP_PORT}/health || \
        python -c "import requests; requests.get('http://localhost:${APP_PORT}/health', timeout=5)" || \
        exit 1

# Mudar para usuário não-privilegiado antes de executar a aplicação
# SEMPRE fazer isso por último, após todas as operações que precisam de root
USER appuser

# ================================================================
# COMANDO PADRÃO - Inicialização da aplicação
# ================================================================
# Usar CMD (e não RUN) para definir o comando padrão
# Permite sobrescrita fácil durante docker run
CMD ["python", "-m", "src.api.main"]

# ================================================================
# EXEMPLOS DE USO:
# ================================================================
# Build da imagem:
# docker build -f docker/Dockerfile.exemplo -t fraud-detection:latest .
#
# Executar com variáveis personalizadas:
# docker run -d \
#   --name fraud-api \
#   -p 8000:8000 \
#   -e APP_ENV=development \
#   -e LOG_LEVEL=DEBUG \
#   -v $(pwd)/logs:/app/logs \
#   -v $(pwd)/models:/app/models \
#   fraud-detection:latest
#
# Executar em modo desenvolvimento (sobrescrever CMD):
# docker run -it \
#   --rm \
#   -v $(pwd):/app \
#   -p 8000:8000 \
#   fraud-detection:latest \
#   python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
#
# Verificar saúde do container:
# docker exec fraud-api curl -f http://localhost:8000/health
#
# Executar testes dentro do container:
# docker exec fraud-api python -m pytest tests/
# ================================================================

# ================================================================
# BOAS PRÁTICAS IMPLEMENTADAS:
# ================================================================
# ✅ Multi-stage build (redução de ~50-70% no tamanho final)
# ✅ Usuário não-privilegiado (segurança)
# ✅ Variáveis de ambiente parametrizáveis
# ✅ Cache otimizado de dependências
# ✅ Healthcheck personalizado
# ✅ Metadados e documentação adequados
# ✅ Limpeza de cache para redução de tamanho
# ✅ Tini como PID 1 para gestão de processos
# ✅ Volumes para dados persistentes
# ✅ .dockerignore para excluir arquivos desnecessários
# ✅ Separação entre dependências e código fonte
# ✅ Configurações específicas para produção
# ================================================================
